---

- name: set global facts
  set_fact:
    _aws_kms_url: >-
      https://console.aws.amazon.com/iam/home#/encryptionKeys

- name: set target key aliases fact
  set_fact:
    _aws_kms_target_key_aliases: >
      {{ aws_kms_target_keys.split(",")
         if aws_kms_target_keys is defined else []
         | sort }}

- name: call optional notifier
  include: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      started running role <b>aws-kms</b>
      on <a href="{{ _aws_kms_url }}">account {{ aws_profile }}</a>{%
      if _aws_kms_target_key_aliases != []
      -%}, key {% for k in _aws_kms_target_key_aliases -%}<b>{{ k }}</b>{%
      if not loop.last -%}, {% endif -%}{% endfor -%}{% endif -%}
  when: notifier_role is defined

- name: set configured key aliases and key metadata facts
  set_fact:
    _aws_kms_configured_key_aliases: >
      {{ aws_kms_keys.keys()
         if aws_kms_keys is defined else []
         | sort }}
    _aws_kms_configured_key_metadata: >
      {{ aws_kms_keys
         if aws_kms_keys is defined else {} }}

- name: set default target key aliases fact
  set_fact:
    _aws_kms_target_key_aliases: '{{ _aws_kms_configured_key_aliases }}'
  when: '_aws_kms_target_key_aliases == []'

- name: list existing key aliases
  command: >
    aws kms list-aliases
            --query 'Aliases[? ! starts_with(AliasName, `alias/aws/`)]
                     .{alias: AliasName, id: TargetKeyId}'
            --profile '{{ aws_profile }}'
  changed_when: False
  register: _aws_kms_existing_key_aliases_data

- name: set existing key aliases data fact
  set_fact:
    _aws_kms_existing_key_aliases_data: >
      {{ _aws_kms_existing_key_aliases_data.stdout | from_json | sort }}

- name: set default existing key aliases and key metadata facts
  set_fact:
    _aws_kms_existing_key_aliases: {}
    _aws_kms_existing_key_metadata: {}
  when: _aws_kms_existing_key_aliases_data == []

- name: reformat existing key aliases fact into dictionary
  set_fact:
    _aws_kms_existing_key_aliases: >
      {{ _aws_kms_existing_key_aliases
         | default({})
         | combine({(item.alias | regex_replace('^alias/', '')): item.id}) }}
  with_items: '{{ _aws_kms_existing_key_aliases_data }}'

- name: get existing key policies
  command: >
    aws kms get-key-policy
            --key-id {{ _aws_kms_existing_key_aliases[item] }}
            --output text
            --policy-name default
            --profile {{ aws_profile }}
  with_items: '{{ _aws_kms_existing_key_aliases }}'
  register: _aws_kms_existing_key_policies
  changed_when: False

- name: set existing key metadata fact
  set_fact:
    _aws_kms_existing_key_metadata: >
      {{ _aws_kms_existing_key_metadata
         | default({})
         | combine({item.item: {"policy": (item.stdout | from_json)}}) }}
  with_items: '{{ _aws_kms_existing_key_policies.results }}'

- name: write host variables file if one doesn't already exist and keys do exist
  copy:
    content: "---\n\n
      {{ {'aws_kms_keys': _aws_kms_existing_key_metadata}
         | to_nice_yaml(indent=2) }}"
    dest: '{{ playbook_dir }}/host_vars/{{ inventory_hostname }}/kms.yml'
    force: false
  when: _aws_kms_existing_key_metadata != {}

- name: set new key aliases fact
  set_fact:
    _aws_kms_new_key_aliases: >
      {{ _aws_kms_configured_key_aliases
         | difference(_aws_kms_existing_key_aliases)
         | sort }}

- name: set untracked key aliases fact
  set_fact:
    _aws_kms_untracked_key_aliases: >
      {{ _aws_kms_existing_key_aliases
         | difference(_aws_kms_configured_key_aliases)
         | sort }}
