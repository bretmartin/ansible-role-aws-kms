---

- name: set global facts
  set_fact:
    _aws_kms_url: >-
      https://console.aws.amazon.com/iam/home#/encryptionKeys

- name: set target keys fact
  set_fact:
    _aws_kms_target_keys: >
      {{ aws_kms_target_keys.split(",")
         if aws_kms_target_keys is defined else []
         | sort }}

- name: call optional notifier
  include: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      started running role <b>aws-kms</b>
      on <a href="{{ _aws_kms_url }}">account {{ aws_profile }}</a>{%
      if _aws_kms_target_keys != []
      -%}, key {% for k in _aws_kms_target_keys -%}<b>{{ k }}</b>{%
      if not loop.last -%}, {% endif -%}{% endfor -%}{% endif -%}
  when: notifier_role is defined

- name: set configured keys and key policies facts
  set_fact:
    _aws_kms_configured_keys: >
      {{ aws_kms_keys.keys()
         if aws_kms_keys is defined else []
         | sort }}
    _aws_kms_configured_key_policies: >
      {{ (aws_kms_keys | sort_key_policy)
         if aws_kms_keys is defined else {} }}

- name: set default target keys fact
  set_fact:
    _aws_kms_target_keys: '{{ _aws_kms_configured_keys }}'
  when: '_aws_kms_target_keys == []'

- name: list existing keys
  command: >
    aws kms list-aliases
            --query 'Aliases[? ! starts_with(AliasName, `alias/aws/`)]
                     .{alias: AliasName, id: TargetKeyId}'
            --profile '{{ aws_profile }}'
  changed_when: False
  register: _aws_kms_existing_keys_data

- name: set existing keys data fact
  set_fact:
    _aws_kms_existing_keys_data: >
      {{ _aws_kms_existing_keys_data.stdout | from_json | sort }}

- name: set default existing keys and key policies facts
  set_fact:
    _aws_kms_existing_keys: []
    _aws_kms_existing_key_policies: {}
  when: _aws_kms_existing_keys_data == []

- name: reformat existing keys fact into dictionary
  set_fact:
    _aws_kms_existing_keys: >
      {{ _aws_kms_existing_keys
         | default({})
         | combine({(key.alias | regex_replace('^alias/', '')): key.id}) }}
  with_items: '{{ _aws_kms_existing_keys_data }}'
  loop_control:
    loop_var: key

- name: get existing key policies
  command: >
    aws kms get-key-policy
            --key-id {{ _aws_kms_existing_keys[key] }}
            --output text
            --policy-name default
            --profile {{ aws_profile }}
  with_items: '{{ _aws_kms_existing_keys }}'
  loop_control:
    loop_var: key
  register: _aws_kms_existing_key_policies_data
  changed_when: False

- name: reformat existing key policies fact into dictionary
  set_fact:
    _aws_kms_existing_key_policies: >
      {{ _aws_kms_existing_key_policies
         | default({})
         | combine({item.key: (item.stdout | from_json)}) }}
  with_items: '{{ _aws_kms_existing_key_policies_data.results }}'

- name: write host variables file if one doesn't already exist and keys do exist
  copy:
    content: "---\n\n
      {{ {'aws_kms_keys': _aws_kms_existing_key_policies}
         | to_nice_yaml(indent=2) }}"
    dest: '{{ playbook_dir }}/host_vars/{{ inventory_hostname }}/kms.yml'
    force: false
  when: _aws_kms_existing_key_policies != {}

- name: set new keys fact
  set_fact:
    _aws_kms_new_keys: >
      {{ _aws_kms_configured_keys | difference(_aws_kms_existing_keys) | sort }}

- name: set untracked keys fact
  set_fact:
    _aws_kms_untracked_keys: >
      {{ _aws_kms_existing_keys | difference(_aws_kms_configured_keys) | sort }}
